//1. –¢–∏–ø—ã 

//–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
//–û–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏
//var ‚Äî–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å 
//let ‚Äî –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–µ—Ç—Å—è –µ–¥–∏–Ω–æ–∂–¥—ã, –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è

var variableName: Type let variableName: Type

//–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
//–Ø–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ 

var variableName: Type =
let constantName: Type = 

//–ù–µ—è–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞

var variableName = value 
let constantName = value



//–°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤ Swift

var variableName: Type = value
variableName = otherTypeValue // error 
var x, y, z: Float

//–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã

//–í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –æ–±—ä—è–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã.
//–ú–æ–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç–∏–ø–∞, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç–∏–ø–∞.
//–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ—Ç –Ω–æ—Ç–∞—Ü–∏—è.

class OuterClass { class InnerClass {
} }
let a: OuterClass.InnerClass
 
//–ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
//–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Unicode —Å–∏–º–≤–æ–ª—ã –≤ —Ç–æ–º —á–∏—Å–ª–µ —ç–º–æ–¥–∑–∏.
//–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å —Ü–∏—Ñ—Ä,–Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã,–ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Å—Ç—Ä–µ–ª–∫–∏,
//–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —é–Ω–∏–∫–æ–¥ —Å–∏–º–≤–æ–ª—ã.
//–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 
let isPrivate = true
let availableColors: [UIColor]

//–ü–ª–æ—Ö–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let œÄ = 3.14159

  
//–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

//Int, Int8, Int16, Int32, Int64 ‚Äî –∑–Ω–∞–∫–æ–≤—ã–µ
//UInt, UInt8, UInt16, UInt32, UInt64 ‚Äî –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ

//Int –∏ UInt –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 32 –∏–ª–∏ 64 –¥–ª–∏–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

//Int –∏ UInt –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ.
 
//–ó–Ω–∞—á–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π

//Float ‚Äî 32-—Ä–∞–∑—Ä—è–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
//—Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –º–∏–Ω–∏–º—É–º 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
//Double ‚Äî 64-—Ä–∞–∑—Ä—è–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
//—Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –º–∏–Ω–∏–º—É–º 15 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏

//Booleans

//–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ Bool true –∏–ª–∏ false
//–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç C –∏–ª–∏ Objective-C
//–ª–æ–≥–∏—á–µ—Å–∫–æ–µ false –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º 0, –∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º true
//–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
let i = 1
if i {// will not compile with error }
 
//Tuple (–ö–æ—Ä—Ç–µ–∂)

var coordinate = (x: 0.0, y: 0.0, z: 0.0)
let http404Error = (404, "Not Found")

//–í –∫–æ—Ä—Ç–µ–∂–µ –º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã.
var someTuple = (code: 404, description:"Not Found")

//–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–º–µ–Ω–∞–ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ 
someTuple = (200, "Ok")
 
//Optional

//Optional –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞
//—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
//–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ 
let correct = Int("123")
let incorrect = Int("Hello World!")

//–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Optional<Int> –∏–ª–∏ Int?
//Int? —Ä–∞–≤–µ–Ω Int –∏–ª–∏ nil
 
nil
//nil ‚Äî –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
//nil –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–≤–æ–∏—Ç—å –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–æ–ª—å–∫–æ Optional<Type> —Ç–∏–ø –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ nil.
 
//–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ if —Å nil

var x: Int?

//–ó–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —á—Ç–µ–Ω–∏–µ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ.
if x != nil {
  return x! + 5 }
//–õ—É—á—à–µ if let ‚Äî —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è.
if let nonOptionalX = x {
  return nonOptionalX + 5 }
 

 
 
 
 
 
 
 
//2. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã

//–ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —è–∑—ã–∫–∞ –°.
 
//–£–Ω–∞—Ä–Ω—ã–π
-variable; !variable
 
//–ë–∏–Ω–∞—Ä–Ω—ã–π
variable + variable
 
//–¢–µ—Ä–Ω–∞—Ä–Ω—ã–π
boolValue ? value1 : value2

 
//–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è (=)
 
//–î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
let b = 10
var a = 5
a=b
let (x, y) = (1, 2)
 
//–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç C, –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ
let x = 1 if x = 5 {
}
 
//–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
 
//–ë–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã 
let a = 5
let b = 3 
var c = 0 c=a+b c=a/b
 
//–£–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã 
c = -a
 
//–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
let helloWorld = "Hello" + "world!"
 
//–°–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
var a = 1
a += 2 

//–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è 
a -= 2
a *= 2 
a /= 2
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 
//–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –° –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (==, <, >). 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (=== –∏ !==) –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Bool.
//–î–ª—è –∫–æ—Ä—Ç–µ–∂–µ–π –¥–æ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
(1, "zebra") < (2, "apple")
(4, "dog") == (4, "dog")
//–¢–∏–ø—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.
 
//–¢–µ—Ä–Ω–∞—Ä–Ω—ã–π —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
question ? answer1 : answer2
 
if question { answer1
} else {
answer2
}
 
Nil-coalescing –æ–ø–µ—Ä–∞—Ç–æ—Ä

//–î–ª—è —Ä–∞–±–æ—Ç—ã —Å optional –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –ë–∏–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä ( ?? ).
 
var a: Int?
let b: Int = 5 
var c: Int = 0
c = (a ?? b)
if a != nil { c = a!
} 
else {
c=b }
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 
//–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä—è–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π.
//–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∏–ø Int.
//–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ a < b.
//–í–æ—Å—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç a –¥–æ b (a...b).
//–î–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é reversed() (a...b).reversed().
 

//–¢—Ä–∏ —Ç–∏–ø–∞: –∑–∞–∫—Ä—ã—Ç—ã–µ, –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ.
//–ó–∞–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (a...b) –≤–∫–ª—é—á–∞–µ—Ç –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è 1...5
//–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–π (a..<b)
//–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ, b –Ω–µ –≤—Ö–æ–¥–∏—Ç. 1..<5
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)
//–û—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ  (...a)
//–û—Ç –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∞...)
//–û–±—ã—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
 
let letters = ["a", "b", "c", "d", "e"] 
for letter in letters[2...] {
    print(letter) // c, d, e
}
for letter in letters[...2] {
    print(letter) // a, b, c 
}
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
//–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
let rangeLeft = ...5
for index in rangeLeft {
    print(index)
} // –ü—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ
 
let rangeRight = 5...
for index in rangeRight {
    print(index)
} // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–≤–Ω–∞
//–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é Int
 
//–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
//–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

//–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ù–ï (!a)
//–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò (a && b)
//–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò (a || b)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 //3. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏
 
//–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
let immutableGreeting = "Hello everyone!" 
var mutableGreeting = "Hello everyone!" 
let emptyString = ""
 
//–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
let multiLine = """ This
is
string
"""
  
//Escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
\\ - –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
\‚Äù - –¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
\n - –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
\u{00000000} - unicode —Å–∏–º–≤–æ–ª
 print("\u{1F40E}") // –≤—ã–≤–æ–¥–∏—Ç "üêé"
  
//String ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è
for char in "–ö–æ—Ç" {
    print(char) }

 let catCharacters: [Character] = ["–ö", "–æ", "—Ç"]
 let catString = String(catCharacters)
 
//–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
let exclamation: Character = "!"
var cat: String = "–ö–æ—Ç"
var result: String = "" 
cat.append(exclamation) // –ö–æ—Ç! 
result = cat + " " + cat // –ö–æ—Ç! –ö–æ—Ç! 
result += " " + cat // –ö–æ—Ç! –ö–æ—Ç! –ö–æ—Ç!
 
//Unicode
U+8439 = ‚Äú–π‚Äù 
U+1F40E = üêé 
"\u{0435}" // –µ
"\u{0308}" // —Ç–æ—á–∫–∏ –¥–ª—è –±—É–∫–≤—ã —ë
let yoLetter = "\u{0435}\u{0308}" // —ë
  
//–°–ª–æ–∂–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
let r = "\u{1F1F7}" // " R " : String 
let u = "\u{1F1FA}" // " U " : String
let ruFlag = r + u // " " : String ruFlag.count // 1
let ruFlagCharacter: Character = ruFlag.first! // " "
 
//–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∫–∞–∫ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
var word = "–ö–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ!"
 
print(word[word.startIndex]) // –ö
 
print(word[word.index(word.startIndex, offsetBy: 3)]) // –æ
 
word.remove(at: word.startIndex) print(word) // –∫–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ!
 
word.insert("–ö", at: word.startIndex) print(word) // –ö–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ!
 
//SubString
  
//–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ SubString
let string = "Hello word!"
let subString = string.suffix(5)
let stringFromSubString = String(subString)
 
//–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
var firstWord = "–±–µ–ª—å–µ" 
firstWord += "\u{0308}" 
let secondWord = "–±–µ–ª—å—ë"
if firstWord == secondWord { 
   print("–°—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã")
} // –°—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã
 
let run = "–ø—Ä–∏–±–µ–∂–∞—Ç—å" 
let prefix = "–ø—Ä–∏"
let suffix = "–∞—Ç—å"
if run.hasPrefix(prefix) && run.hasSuffix(suffix) {
 print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ \"–ø—Ä–∏\", –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \"–∞—Ç—å\"")
} // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "–ø—Ä–∏", –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "–∞—Ç—å"
 
 
 
 
 
 
 
 
 
 

 
 
 

 
 
//4. –ü–æ—Ç–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Flow control)
 
//–í—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è
if
guard 
switch
 
//–¶–∏–∫–ª—ã
for in 
while
 
//–í—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
continue
break
fallthrough 
return
throw //–±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
 
//–¶–∏–∫–ª—ã For-In (–∫–æ–ª–ª–µ–∫—Ü–∏–∏)

//for in –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
 
//–ú–∞—Å—Å–∏–≤—ã –∏ –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
let digits = [1, 2, 3] 
for element in digits {
    print(element)
} //1 //2 //3
 
–°–ª–æ–≤–∞—Ä–∏ ‚Äî –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –≤–∏–¥–∞ (–ö–ª—é—á, –ó–Ω–∞—á–µ–Ω–∏–µ)
let keyValues = ["One" : 1, "Two" : 2, "Three" : 3]
for element in keyValues {
    print(element)
} 
// (key: "One", value: 1) // (key: "Three", value: 3) // (key: "Two", value: 2)
 
//–¶–∏–∫–ª—ã For-In (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
//–î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π.
let array = [1, 2, 3, 4, 5]
for index in 1...3 {
    print(array[index])
}// 2 // 3 // 4
  
//–¶–∏–∫–ª—ã While –∏ Repeat-While
//–¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –Ω–µ –ø—Ä–∏–º–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ false
var value = 0
while (value < 10) { 
    value += 1
    print(value)
}

var value = 0
repeat { value += 1
    print(value)
} while (value < 10)

  
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è
//–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π –∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π.
if 
switch 
guard
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è (if - else if - else)

let x = 50
if x == 1 { 
   print("One")
}
else if x == 2 { 
   print("Two")
} 
else if x < 10 && x >= 0 { 
   print("X –≥–¥–µ-—Ç–æ –æ—Ç 0 –¥–æ 10")
} else {
   print("X –±–æ–ª—å—à–µ 10")
} // X –±–æ–ª—å—à–µ 10
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è (Switch)
let char = "C"
switch char { 
 case "A":
    print("–ø–æ—Ö–æ–∂–µ –Ω–∞ A") 
case "B":
    print("–ø–æ—Ö–æ–∂–µ –Ω–∞ B") 
default:
    print("–ù–∏ A, –Ω–∏ B") 
}
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è (Switch –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
//–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤ case. 
let value = 6
switch value { 
case 0...5:
    print("–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 5") 
case 6...10:
    print("–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 6 –¥–æ 10") 
default:
    print("–ù–µ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ
–¥–∏–∞–ø–∞–∑–æ–Ω—ã") 
}
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è (Switch tuples)
//–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ switch case 
let coordinate = (0, 1)
switch coordinate { 
case (0, 0):
    print("–ù–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç") 
case (_, 0):
    print("–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏ Y") 
case (0, -10...10):
    print("–ù–∞ –æ—Å–∏ X –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -10 –¥–æ 10") 
default:
    print("–ì–¥–µ-—Ç–æ —Ä—è–¥–æ–º") 
}
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–µ—Ç–≤–ª–µ–Ω–∏—è (Switch —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
//–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è case –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è
let value = 8 
switch value { 
case 0:
    print(0)
case 1, 3, 5, 7, 9:
    print("–ù–µ—á–µ—Ç–Ω–æ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ–æ—Ç 0 –¥–æ 10") 
case 2, 4, 6, 8, 10:
    print("–ß–µ—Ç–Ω–æ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ–æ—Ç 0 –¥–æ 10") 
default:
    print("–ù–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 0 –¥–æ 10") 
}
 
Guard
//–í—ã—Ä–∞–∂–µ–Ω–∏–µ guard –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∫–æ—É–ø–∞
var value: Int?
guard let x = value else { 
    print("–ó–Ω–∞—á–µ–Ω–∏–µ x —Ä–∞–≤–Ω—è–µ—Ç—Å—è nil")
    return
}
print ("–ó–Ω–∞—á–µ–Ω–∏–µ x = \(x)")
 
//–í—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
 
//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω—è—é—â–∏–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
continue 
break
fallthrough 
return
throw
 
//–ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (continue)
//–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π
let numbers=[1,3,4,5,6,8,9]
for number in numbers { 
    if (number == 4) {
        print("–ß–µ—Ç—ã—Ä–µ –Ω–∞ 2 —É–º–Ω–æ–∂–∞—Ç—å –Ω–µ –±—É–¥–µ–º") } 
        continue
}
    print(number * 2) 
}
 
//–ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (break)
 let numbers=[1,3,4,5,6,8,9]
for number in numbers { 
    if (number == 4) {
        print("–°–Ω–æ–≤–∞ 4, –ø–æ—Ä–∞ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å—Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º") } 
        break
    }
   print(number * 2) 
}
 

Break –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ switch –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ü–∏–∫–ª–∞
let color: UIColor = .white
switch color { 
case .red:
    print("–ö—Ä–∞—Å–Ω—ã–π") 
case .blue:
    print("–°–∏–Ω–∏–π") 
case .green:
    print("–ó–µ–ª–µ–Ω—ã–π") 
default:
    break
}

 
//–ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (fallthrough)
//–í Swift, –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ switch, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.
var value = 4
var value = 4
switch value { 
case 1...5:
    value = value * 2
    fallthrough
// –ø–∞–¥–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π case
case 6...10:
    value = value + 1
default:
    value = value * 0
} 
print(value) // value = 0
 
//–ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (return)

func sum(_ lhs: Int, _ rhs: Int ) -> Int {
    return lhs + rhs 
}
 









